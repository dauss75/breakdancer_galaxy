.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GD::Graph::histogram 3"
.TH GD::Graph::histogram 3 "2006-03-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GD::Graph::histogram \- Histogram plotting module for Perl5
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use GD::Graph::histogram;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
GD::Graph::histogram extends the GD::Graph module to create histograms.
The module allow creation of count or percentage histograms.
.SH "USAGE"
.IX Header "USAGE"
Fill an array with all the data values that are to be plotted. Note that
GD::Graph::histogram unlike the other GD::Graph modules can only plot one
data set at a time.
.PP
.Vb 1
\&        $data = [1,5,7,8,9,10,11,3,3,5,5,5,7,2,2];
.Ve
.PP
Create the graph
.PP
.Vb 1
\&        my $graph = new GD::Graph::histogram(400,600);
.Ve
.PP
Set graph options
.PP
.Vb 11
\&        $graph\->set( 
\&                x_label         => \*(AqX Label\*(Aq,
\&                y_label         => \*(AqCount\*(Aq,
\&                title           => \*(AqA Simple Count Histogram Chart\*(Aq,
\&                x_labels_vertical => 1,
\&                bar_spacing     => 0,
\&                shadow_depth    => 1,
\&                shadowclr       => \*(Aqdred\*(Aq,
\&                transparent     => 0,
\&        ) 
\&        or warn $graph\->error;
.Ve
.PP
plot the graph
.PP
.Vb 1
\&        my $gd = $graph\->plot($data) or die $graph\->error;
.Ve
.PP
save the graph to a file
.PP
.Vb 3
\&        open(IMG, \*(Aq>histogram.png\*(Aq) or die $!;
\&        binmode IMG;
\&        print IMG $gd\->png;
.Ve
.SH "METHODS"
.IX Header "METHODS"
GD::Graph::histogram supports all the methods support by GD::Graph.
Please refer to the GD::Graph documentation for more information.
.PP
The only method that behaves differently is \fIplot\fR
.PP
The \fIplot\fR method provided by GD::Graph::histogram expects a 
reference to an array of numbers.
.PP
Based on the input data, GD::Graph::histogram will generate the
appropriate labels for the X axis. The X axis label represent the center
point of the range of each histogram bin.
.SH "OPTIONS"
.IX Header "OPTIONS"
GD::Graph::histogram supports all the options supported by GD::Graph::bars.
Please refer to the GD::Graph documentation for more information.
.PP
The two additional options that are specific to GD::Graph::histogram are:
.PP
.Vb 4
\&        histogram_bins
\&                Specify the number of histogram bins to bucket the data into.
\&                The default is for the module to automatically computed the
\&                histogram bins based on the data.
\&
\&        histogram_type
\&                Can be set to either \*(Aqpercentage\*(Aq or \*(Aqcount\*(Aq. By default the module
\&                will create \*(Aqcount\*(Aq histograms.
.Ve
.SH "NOTES"
.IX Header "NOTES"
As with all Modules for Perl: Please stick to using the interface. If
you try to fiddle too much with knowledge of the internals of this
module, you could get burned. I may change them at any time.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&        Snehanshu Shah
\&        perl@whizdog.com
\&        http://www.whizdog.com
.Ve
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks for all the feedback, bug reports and bug fixes
.PP
Martin Corley 
Jonathan Barber 
William Miller
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), GD::Graph
